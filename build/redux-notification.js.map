{"version":3,"file":"redux-notification.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/utils/gen-id.js","../src/store/reducers/index.js","../src/store/selectors/index.js","../src/components/Notification/Notification.js","../src/store/actions/actionTypes.js","../src/store/actions/notifications.js","../src/components/Notifications/Notifications.js","../src/store/reducers/notificationsReducer.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","const genID = () => {\n    let firstPart = (Math.random() * 46656) | 0;\n    let secondPart = (Math.random() * 46656) | 0;\n    firstPart = (\"000\" + firstPart.toString(36)).slice(-3);\n    secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\n    return firstPart + secondPart;\n};\n\nexport default genID;","import genID from \"../../utils/gen-id\";\n\nexport const NOTIFICATIONS = 'NOTIFICATIONS';\n\nexport const addNotificationFromAction = (state, {notification}) => [...state, {\n    id: genID(8),\n    ...notification\n}];","import {NOTIFICATIONS} from \"../reducers\";\n\nexport const getNotifications = state => state[NOTIFICATIONS];","import React, {Component} from 'react';\n\nimport classes from './Notification.scss';\n\nconst styles = {\n    'default': classes.Default,\n    'success': classes.Success\n};\n\nclass Notification extends Component {\n\n    static defaultProps = {\n        timeout: 10\n    };\n\n    state = {\n        progress: 100\n    };\n\n    componentDidMount() {\n        const frameTime = 1 / 30;\n        this.interval = setInterval(() => {\n            this.setState(({progress}) => (\n                {progress: progress - (this.props.timeout * frameTime)}\n            ), () => {\n                if (this.state.progress <= 0) {\n                    clearInterval(this.interval);\n                    this.handleRemoval();\n                }\n            });\n        }, frameTime * 1000);\n    }\n\n    handleCloseButton = () => {\n        this.setState({progress: 0});\n    };\n\n    handleRemoval = () => {\n        setTimeout(() => this.props.remove(this.props.id), 800);\n    };\n\n    render() {\n        return (\n            <div\n                className={[\n                    classes.Notification,\n                    styles[this.props.type] || styles.success,\n                    'animated',\n                    this.state.progress > 0 ? 'bounceInLeft' : 'bounceOutLeft'\n                ].join(' ')}>\n                <button type=\"button\" className=\"btn\" onClick={this.handleCloseButton}>\n                    <i className=\"fa fa-times fa-fw\"/>\n                </button>\n                <div className={classes.Content}>\n                    {this.props.text}\n                </div>\n                <div style={{width: `${this.state.progress}%`}} className={classes.ProgressBar}/>\n            </div>\n        )\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n}\n\nexport default Notification;","export const ADD_NOTIFICATION = 'ADD_NOTIFICATION';\nexport const REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION';","import * as actionTypes from './actionTypes';\n\nexport const addNotification = (displayType, text) => {\n    return {\n        type: actionTypes.ADD_NOTIFICATION,\n        text,\n        displayType\n    };\n};\n\nexport const removeNotification = id => {\n    return {\n        type: actionTypes.REMOVE_NOTIFICATION,\n        id\n    };\n};\n","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\n\nimport classes from './Notifications.scss';\nimport {getNotifications} from \"../../store/selectors\";\nimport Notification from \"../Notification/Notification\";\nimport * as actions from '../../store/actions';\n\nclass Notifications extends Component {\n\n    componentWillReceiveProps(nextProps) {\n        console.log(nextProps);\n    }\n\n    render() {\n        return (\n            <div className={classes.Notifications}>\n                {this.props.notifications.map(notification => (\n                    <Notification key={notification.id} {...notification} remove={this.props.remove}/>\n                ))}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    notifications: getNotifications(state)\n});\n\nexport default connect(mapStateToProps, {\n    remove: actions.removeNotification\n})(Notifications);","import * as actionTypes from '../actions/actionTypes';\nimport genID from \"../../utils/gen-id\";\n\nconst initialState = [];\n\nconst reducer = (userReducer) => (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_NOTIFICATION: return createNotification(state, action);\n        case actionTypes.REMOVE_NOTIFICATION: return removeNotification(state, action);\n        default: return userReducer ? userReducer(state, action) : state;\n    }\n};\n\nconst createNotification = (state, {text, displayType, timeout}) => [...state, {\n    id: genID(8),\n    text,\n    displayType,\n    timeout\n}];\n\nconst removeNotification = (state, {id}) => state.filter((notif) => notif.id !== id);\n\nexport default reducer;\n"],"names":["genID","firstPart","Math","random","secondPart","toString","slice","NOTIFICATIONS","addNotificationFromAction","state","notification","getNotifications","styles","classes","Default","Success","Notification","handleCloseButton","setState","progress","handleRemoval","props","remove","id","frameTime","interval","setInterval","timeout","React","type","success","join","Content","text","width","ProgressBar","Component","defaultProps","ADD_NOTIFICATION","REMOVE_NOTIFICATION","addNotification","displayType","actionTypes","removeNotification","Notifications","nextProps","log","notifications","map","mapStateToProps","connect","actions","initialState","reducer","userReducer","action","createNotification","filter","notif"],"mappings":"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"}